
RTOS_Lesson_2.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800101c  0800101c  00011024  2**0
                  CONTENTS
  4 .ARM          00000000  0800101c  0800101c  00011024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800101c  08001024  00011024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000000  08001024  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08001024  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005962  00000000  00000000  0001104d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f8c  00000000  00000000  000169af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001070  00000000  00000000  0001793b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c8  00000000  00000000  000189b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  00018c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002afd  00000000  00000000  00018ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003153  00000000  00000000  0001b9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00013a6f  00000000  00000000  0001eb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00032587  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008d4  00000000  00000000  00032604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fe0 	.word	0x08000fe0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000fe0 	.word	0x08000fe0

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:

unsigned char  SysTickLED;


 void HardFault_Handler (void)
 {
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	 while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
 }
 void MemManage_Handler (void)
 {
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	 while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
 }
 void BusFault_Handler (void)
 {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	 while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
 }
 void UsageFault_Handler (void)
 {
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	 while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
 }

 __attribute ((naked)) void SVC_Handler(void)
 {
 	__asm("tst lr, #0x04 	\n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bbc7 	b.w	80009d4 <OS_SVC>
 		  "ITE EQ			\n\t"
 		  "mrseq r0,MSP		\n\t"
 		  "mrsne r0,PSP		\n\t"
 		  "B OS_SVC ");
 }
 8000246:	bf00      	nop

08000248 <HW_init>:

void HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	// X count -> 1 ms
	// X = 8000 Count

	//decrease PendSV interrupt priority to be smaller than or equal SYStick Timer
	//SYSTICK have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <trigger_OS_PendSV>:


void trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |=SCB_ICSR_PENDSVSET_Msk;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Tiker>:


void Start_Tiker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTickLED ^=1;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <SysTick_Handler+0x20>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SysTick_Handler+0x20>)
 8000298:	701a      	strb	r2, [r3, #0]
	//determine pCurrrent and pNext
	Decide_whatNext();
 800029a:	f000 fa61 	bl	8000760 <Decide_whatNext>
	//Switch Context
	trigger_OS_PendSV();
 800029e:	f7ff ffdd 	bl	800025c <trigger_OS_PendSV>
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000024 	.word	0x20000024

080002ac <FIFO_init>:

#include "MYRTOS_FIFO.h"


FIFO_Buf_Status FIFO_init(FIFO_Buf_t *fifo,element_type* buf ,unsigned int length)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	if(buf==NULL)
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <FIFO_init+0x16>
		return FIFO_null;
 80002be:	2303      	movs	r3, #3
 80002c0:	e00f      	b.n	80002e2 <FIFO_init+0x36>

	fifo->base=buf;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	68ba      	ldr	r2, [r7, #8]
 80002c6:	609a      	str	r2, [r3, #8]
	fifo->head=buf;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	60da      	str	r2, [r3, #12]
	fifo->tail=buf;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	611a      	str	r2, [r3, #16]
	fifo->length=length;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
	fifo->count=0;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]

	return FIFO_no_error;
 80002e0:	2302      	movs	r3, #2


}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <FIFO_enqueue>:
FIFO_Buf_Status FIFO_enqueue(FIFO_Buf_t *fifo,element_type item)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]

	if(!fifo->base || !fifo->head || !fifo->tail)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d007      	beq.n	800030e <FIFO_enqueue+0x22>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x22>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x26>
		return FIFO_null;
 800030e:	2303      	movs	r3, #3
 8000310:	e025      	b.n	800035e <FIFO_enqueue+0x72>

	if(FIFO_IS_FULL(fifo)==FIFO_full)
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f864 	bl	80003e0 <FIFO_IS_FULL>
 8000318:	4603      	mov	r3, r0
 800031a:	2b01      	cmp	r3, #1
 800031c:	d101      	bne.n	8000322 <FIFO_enqueue+0x36>
		return FIFO_full;
 800031e:	2301      	movs	r3, #1
 8000320:	e01d      	b.n	800035e <FIFO_enqueue+0x72>

	*(fifo->head)=item;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	683a      	ldr	r2, [r7, #0]
 8000328:	601a      	str	r2, [r3, #0]
	fifo->count++;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	605a      	str	r2, [r3, #4]

	//circular FIFO
	if(fifo->head ==(fifo->base+(fifo->length*sizeof(element_type))))
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68da      	ldr	r2, [r3, #12]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6899      	ldr	r1, [r3, #8]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	440b      	add	r3, r1
 8000344:	429a      	cmp	r2, r3
 8000346:	d104      	bne.n	8000352 <FIFO_enqueue+0x66>
		fifo->head=fifo->base;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	e004      	b.n	800035c <FIFO_enqueue+0x70>
	else
		fifo->head++;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68db      	ldr	r3, [r3, #12]
 8000356:	1d1a      	adds	r2, r3, #4
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	60da      	str	r2, [r3, #12]

	return FIFO_no_error;
 800035c:	2302      	movs	r3, #2

}
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <FIFO_dequeue>:
FIFO_Buf_Status FIFO_dequeue(FIFO_Buf_t *fifo,element_type *item)
{
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	6039      	str	r1, [r7, #0]
	if(!fifo->base || !fifo->head || !fifo->tail)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d007      	beq.n	8000388 <FIFO_dequeue+0x22>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d003      	beq.n	8000388 <FIFO_dequeue+0x22>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d101      	bne.n	800038c <FIFO_dequeue+0x26>
		return FIFO_null;
 8000388:	2303      	movs	r3, #3
 800038a:	e024      	b.n	80003d6 <FIFO_dequeue+0x70>

	if(fifo->count ==0)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d101      	bne.n	8000398 <FIFO_dequeue+0x32>
		return FIFO_empty;
 8000394:	2300      	movs	r3, #0
 8000396:	e01e      	b.n	80003d6 <FIFO_dequeue+0x70>

	*item =*(fifo->tail);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	601a      	str	r2, [r3, #0]

	fifo->count--;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	1e5a      	subs	r2, r3, #1
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	605a      	str	r2, [r3, #4]

	//circular FIFO
	if(fifo->tail ==(fifo->base+(fifo->length*sizeof(element_type))))
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	691a      	ldr	r2, [r3, #16]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6899      	ldr	r1, [r3, #8]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	011b      	lsls	r3, r3, #4
 80003ba:	440b      	add	r3, r1
 80003bc:	429a      	cmp	r2, r3
 80003be:	d104      	bne.n	80003ca <FIFO_dequeue+0x64>
		fifo->tail=fifo->base;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	689a      	ldr	r2, [r3, #8]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	e004      	b.n	80003d4 <FIFO_dequeue+0x6e>
	else
		fifo->tail++;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	1d1a      	adds	r2, r3, #4
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	611a      	str	r2, [r3, #16]


	return FIFO_no_error;
 80003d4:	2302      	movs	r3, #2

}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <FIFO_IS_FULL>:
FIFO_Buf_Status FIFO_IS_FULL(FIFO_Buf_t *fifo)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	if(!fifo->base || !fifo->head || !fifo->tail)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d007      	beq.n	8000400 <FIFO_IS_FULL+0x20>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d003      	beq.n	8000400 <FIFO_IS_FULL+0x20>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d101      	bne.n	8000404 <FIFO_IS_FULL+0x24>
	return FIFO_null;
 8000400:	2303      	movs	r3, #3
 8000402:	e008      	b.n	8000416 <FIFO_IS_FULL+0x36>

	if(fifo->count ==fifo->length)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685a      	ldr	r2, [r3, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d101      	bne.n	8000414 <FIFO_IS_FULL+0x34>
		return FIFO_full;
 8000410:	2301      	movs	r3, #1
 8000412:	e000      	b.n	8000416 <FIFO_IS_FULL+0x36>

	return FIFO_no_error;
 8000414:	2302      	movs	r3, #2

}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <MYRTOS_Create_MainStack>:




MYRTOS_errorID MYRTOS_Create_MainStack()
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task=(unsigned int)&_estack;
 8000424:	4a0f      	ldr	r2, [pc, #60]	; (8000464 <MYRTOS_Create_MainStack+0x44>)
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MYRTOS_Create_MainStack+0x48>)
 8000428:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task=OS_Control._S_MSP_Task - MainStackSize ;
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MYRTOS_Create_MainStack+0x48>)
 800042e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000432:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <MYRTOS_Create_MainStack+0x48>)
 8000438:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	//if (_E_MSP_Task < &_eheap) Error : exceeded the available stack size
	if(OS_Control._E_MSP_Task < (unsigned int )(&_eheap))
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MYRTOS_Create_MainStack+0x48>)
 800043e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <MYRTOS_Create_MainStack+0x4c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d201      	bcs.n	800044c <MYRTOS_Create_MainStack+0x2c>
	{
		return Task_exceeded_StackSize;
 8000448:	2302      	movs	r3, #2
 800044a:	e007      	b.n	800045c <MYRTOS_Create_MainStack+0x3c>
	}


	//Aligned 8 Byte spaces between Main Task and PSP Tasks
	OS_Control.PSP_Task_Locator=(OS_Control._E_MSP_Task - 8);
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MYRTOS_Create_MainStack+0x48>)
 800044e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000452:	3b08      	subs	r3, #8
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <MYRTOS_Create_MainStack+0x48>)
 8000456:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return NoError;
 800045a:	2300      	movs	r3, #0


}
 800045c:	4618      	mov	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	20002800 	.word	0x20002800
 8000468:	20000028 	.word	0x20000028
 800046c:	20000ae0 	.word	0x20000ae0

08000470 <MYRTOS_IdleTask>:

unsigned char IdleTaskLed ;
void MYRTOS_IdleTask ()
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLed ^=1;
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <MYRTOS_IdleTask+0x18>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	f083 0301 	eor.w	r3, r3, #1
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b02      	ldr	r3, [pc, #8]	; (8000488 <MYRTOS_IdleTask+0x18>)
 8000480:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8000482:	bf00      	nop
		IdleTaskLed ^=1;
 8000484:	e7f6      	b.n	8000474 <MYRTOS_IdleTask+0x4>
 8000486:	bf00      	nop
 8000488:	2000022c 	.word	0x2000022c

0800048c <MYRTOS_init>:
	}
}

MYRTOS_errorID MYRTOS_init()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
	MYRTOS_errorID error =NoError;
 8000492:	2300      	movs	r3, #0
 8000494:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend;
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <MYRTOS_init+0x70>)
 8000498:	2200      	movs	r2, #0
 800049a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the main Stack for OS
	error +=MYRTOS_Create_MainStack();
 800049e:	f7ff ffbf 	bl	8000420 <MYRTOS_Create_MainStack>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4413      	add	r3, r2
 80004aa:	71fb      	strb	r3, [r7, #7]
	//Create OS Ready Queue
	if(FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100)!=FIFO_no_error)
 80004ac:	2264      	movs	r2, #100	; 0x64
 80004ae:	4914      	ldr	r1, [pc, #80]	; (8000500 <MYRTOS_init+0x74>)
 80004b0:	4814      	ldr	r0, [pc, #80]	; (8000504 <MYRTOS_init+0x78>)
 80004b2:	f7ff fefb 	bl	80002ac <FIFO_init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d002      	beq.n	80004c2 <MYRTOS_init+0x36>
	{
		error +=Ready_Queue_init_error;
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	3301      	adds	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy(MYRTOS_idleTask.TaskName,"idleTask");
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MYRTOS_init+0x7c>)
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <MYRTOS_init+0x80>)
 80004c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004c8:	c303      	stmia	r3!, {r0, r1}
 80004ca:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority =255;
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <MYRTOS_init+0x84>)
 80004ce:	22ff      	movs	r2, #255	; 0xff
 80004d0:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry=MYRTOS_IdleTask;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MYRTOS_init+0x84>)
 80004d4:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <MYRTOS_init+0x88>)
 80004d6:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size=300;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <MYRTOS_init+0x84>)
 80004da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004de:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <MYRTOS_init+0x84>)
 80004e2:	f000 f857 	bl	8000594 <MYRTOS_CreateTask>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461a      	mov	r2, r3
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4413      	add	r3, r2
 80004ee:	71fb      	strb	r3, [r7, #7]


	return error ;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000028 	.word	0x20000028
 8000500:	20000230 	.word	0x20000230
 8000504:	200001d4 	.word	0x200001d4
 8000508:	20000204 	.word	0x20000204
 800050c:	08000ff8 	.word	0x08000ff8
 8000510:	200001e8 	.word	0x200001e8
 8000514:	08000471 	.word	0x08000471

08000518 <MyRTOS_Create_TaskStack>:




void MyRTOS_Create_TaskStack(Task_ref *Tref)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	 * r0

	 * ========
	 * r4 ,r5 ,r6 ,r7 ,r8 ,r9,r10,r11 (Saved /Restore) Manual
	 */
	Tref->Current_PSP =Tref->_S_PSP_TASK;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	461a      	mov	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	1f1a      	subs	r2, r3, #4
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)=0x01000000; 	//Dummy xPSR should T=1 in bit 24 to avoid BusFault ;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800053c:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	1f1a      	subs	r2, r3, #4
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry; //PC
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	689a      	ldr	r2, [r3, #8]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;	//LR =0xFFFFFFFD (EXC_RETURN) return to thread with PSP
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	1f1a      	subs	r2, r3, #4
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f06f 0202 	mvn.w	r2, #2
 8000564:	601a      	str	r2, [r3, #0]

	for (int j=0 ; j<13 ; j++)
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	e00b      	b.n	8000584 <MyRTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP--;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	1f1a      	subs	r2, r3, #4
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) =0;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
	for (int j=0 ; j<13 ; j++)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3301      	adds	r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b0c      	cmp	r3, #12
 8000588:	ddf0      	ble.n	800056c <MyRTOS_Create_TaskStack+0x54>
	}




}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <MYRTOS_CreateTask>:

MYRTOS_errorID MYRTOS_CreateTask(Task_ref *Tref)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error =NoError;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]

	//Create its Own PSP stack
	//Check Task Stack size exceeded the PSP stack
	Tref->_S_PSP_TASK = OS_Control.PSP_Task_Locator;
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MYRTOS_CreateTask+0x74>)
 80005a2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_TASK = Tref->_S_PSP_TASK - Tref->Stack_Size;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	691a      	ldr	r2, [r3, #16]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1ad2      	subs	r2, r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	615a      	str	r2, [r3, #20]
	//-						-
	//-						-
	//-	_eheap				-
	//-						-

	if(Tref->_E_PSP_TASK < (unsigned int )(&_eheap))
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <MYRTOS_CreateTask+0x78>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d201      	bcs.n	80005c6 <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize;
 80005c2:	2302      	movs	r3, #2
 80005c4:	e01b      	b.n	80005fe <MYRTOS_CreateTask+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_TASK -8 );
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	3b08      	subs	r3, #8
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <MYRTOS_CreateTask+0x74>)
 80005ce:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack(Tref);
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff ffa0 	bl	8000518 <MyRTOS_Create_TaskStack>

	//Update Scheduler Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]=Tref;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MYRTOS_CreateTask+0x74>)
 80005da:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80005de:	490a      	ldr	r1, [pc, #40]	; (8000608 <MYRTOS_CreateTask+0x74>)
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MYRTOS_CreateTask+0x74>)
 80005e8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a06      	ldr	r2, [pc, #24]	; (8000608 <MYRTOS_CreateTask+0x74>)
 80005f0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//Task State Update -> Suspend
	Tref->TaskState=Suspend;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000028 	.word	0x20000028
 800060c:	20000ae0 	.word	0x20000ae0

08000610 <bubbleSort>:

//Handler
void bubbleSort()
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
	unsigned int i , j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks;
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <bubbleSort+0x8c>)
 8000618:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800061c:	607b      	str	r3, [r7, #4]

	for (i =0 ;i< (n-1); i++)
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e030      	b.n	8000686 <bubbleSort+0x76>
	{
		//Last i elements are already in place
		for (j =0 ; j< (n-i-1 ) ; j++)
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	e023      	b.n	8000672 <bubbleSort+0x62>
		{
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j+1]->priority)
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <bubbleSort+0x8c>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	3301      	adds	r3, #1
 8000638:	4918      	ldr	r1, [pc, #96]	; (800069c <bubbleSort+0x8c>)
 800063a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d913      	bls.n	800066c <bubbleSort+0x5c>
			{
				temp =OS_Control.OSTasks[j];
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <bubbleSort+0x8c>)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064c:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j]=OS_Control.OSTasks[j+1];
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	3301      	adds	r3, #1
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <bubbleSort+0x8c>)
 8000654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000658:	4910      	ldr	r1, [pc, #64]	; (800069c <bubbleSort+0x8c>)
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1]=temp;
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	3301      	adds	r3, #1
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <bubbleSort+0x8c>)
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j =0 ; j< (n-i-1 ) ; j++)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	3301      	adds	r3, #1
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	3b01      	subs	r3, #1
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	429a      	cmp	r2, r3
 800067e:	d3d4      	bcc.n	800062a <bubbleSort+0x1a>
	for (i =0 ;i< (n-1); i++)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3b01      	subs	r3, #1
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d3c9      	bcc.n	8000624 <bubbleSort+0x14>
			}
		}
	}

}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000028 	.word	0x20000028

080006a0 <MYRTOS_Update_Schedule_tables>:


//Handler
void MYRTOS_Update_Schedule_tables()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	Task_ref* temp =NULL ;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask;
	Task_ref* PnextTask;
	int i =0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
	//1-Bubble Sort Scheduler Table OS_Control->OSTASKS[100] (priority high than low)
	bubbleSort();
 80006ae:	f7ff ffaf 	bl	8000610 <bubbleSort>
	//2-free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp)!= FIFO_empty);
 80006b2:	bf00      	nop
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4827      	ldr	r0, [pc, #156]	; (8000758 <MYRTOS_Update_Schedule_tables+0xb8>)
 80006ba:	f7ff fe54 	bl	8000366 <FIFO_dequeue>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1f7      	bne.n	80006b4 <MYRTOS_Update_Schedule_tables+0x14>
	//3-update ready Queue
	while(i< OS_Control.NoOfActiveTasks)
 80006c4:	e03d      	b.n	8000742 <MYRTOS_Update_Schedule_tables+0xa2>
	{
		Ptask = OS_Control.OSTasks[i];
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <MYRTOS_Update_Schedule_tables+0xbc>)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1];
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MYRTOS_Update_Schedule_tables+0xbc>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	607b      	str	r3, [r7, #4]

		if(Ptask->TaskState != Suspend)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d02a      	beq.n	800073c <MYRTOS_Update_Schedule_tables+0x9c>
		{
			//in case we reached to the end of available OSTASKS
			//Here Bug "Logical Error"
			if(PnextTask->TaskState == Suspend )
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d108      	bne.n	8000702 <MYRTOS_Update_Schedule_tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	4819      	ldr	r0, [pc, #100]	; (8000758 <MYRTOS_Update_Schedule_tables+0xb8>)
 80006f4:	f7ff fdfa 	bl	80002ec <FIFO_enqueue>
				Ptask->TaskState =ready;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2203      	movs	r2, #3
 80006fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000700:	e025      	b.n	800074e <MYRTOS_Update_Schedule_tables+0xae>
			}
			// if the Ptask priority > PnextTask priority then (lowest number is meaning higher priority)
			if(Ptask->priority < PnextTask->priority)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	791a      	ldrb	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	429a      	cmp	r2, r3
 800070c:	d208      	bcs.n	8000720 <MYRTOS_Update_Schedule_tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 800070e:	68b9      	ldr	r1, [r7, #8]
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <MYRTOS_Update_Schedule_tables+0xb8>)
 8000712:	f7ff fdeb 	bl	80002ec <FIFO_enqueue>
				Ptask->TaskState =ready;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2203      	movs	r2, #3
 800071a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 800071e:	e016      	b.n	800074e <MYRTOS_Update_Schedule_tables+0xae>
			}
			else if (Ptask->priority == PnextTask->priority)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	791a      	ldrb	r2, [r3, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d107      	bne.n	800073c <MYRTOS_Update_Schedule_tables+0x9c>
			{
				//if the Ptask priority == PnextTask then
				//	push Ptask to ready state
				//and make the ptask = PnextTask and
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <MYRTOS_Update_Schedule_tables+0xb8>)
 8000730:	f7ff fddc 	bl	80002ec <FIFO_enqueue>
				Ptask->TaskState =ready;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2203      	movs	r2, #3
 8000738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				//not allowed to happen as we already reordered it bu bubble sort
			}

		}

		i++;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MYRTOS_Update_Schedule_tables+0xbc>)
 8000744:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8bb      	bhi.n	80006c6 <MYRTOS_Update_Schedule_tables+0x26>
	}
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001d4 	.word	0x200001d4
 800075c:	20000028 	.word	0x20000028

08000760 <Decide_whatNext>:
//Handler Mode
void Decide_whatNext()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	// if Ready Queue is empty && OS_Control.currentTask->TaskState !=suspend
	// The Condition Here Logical Bug
	if(Ready_QUEUE.count == 0 && OS_Control.CurrentTask->TaskState != Suspend)
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <Decide_whatNext+0x98>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d11a      	bne.n	80007a2 <Decide_whatNext+0x42>
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <Decide_whatNext+0x9c>)
 800076e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000772:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000776:	2b00      	cmp	r3, #0
 8000778:	d013      	beq.n	80007a2 <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState=Running;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <Decide_whatNext+0x9c>)
 800077c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000780:	2201      	movs	r2, #1
 8000782:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again (round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <Decide_whatNext+0x9c>)
 8000788:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <Decide_whatNext+0x98>)
 8000790:	f7ff fdac 	bl	80002ec <FIFO_enqueue>
		//To Switch Context
		OS_Control.NextTask=OS_Control.CurrentTask;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <Decide_whatNext+0x9c>)
 8000796:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <Decide_whatNext+0x9c>)
 800079c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState=ready;
		}
	}

}
 80007a0:	e027      	b.n	80007f2 <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 80007a2:	4917      	ldr	r1, [pc, #92]	; (8000800 <Decide_whatNext+0xa0>)
 80007a4:	4814      	ldr	r0, [pc, #80]	; (80007f8 <Decide_whatNext+0x98>)
 80007a6:	f7ff fdde 	bl	8000366 <FIFO_dequeue>
		OS_Control.NextTask->TaskState=Running;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <Decide_whatNext+0x9c>)
 80007ac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007b0:	2201      	movs	r2, #1
 80007b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority)&&(OS_Control.CurrentTask->TaskState!= Suspend))
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <Decide_whatNext+0x9c>)
 80007b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007bc:	791a      	ldrb	r2, [r3, #4]
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <Decide_whatNext+0x9c>)
 80007c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d113      	bne.n	80007f2 <Decide_whatNext+0x92>
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <Decide_whatNext+0x9c>)
 80007cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00c      	beq.n	80007f2 <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <Decide_whatNext+0x9c>)
 80007da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <Decide_whatNext+0x98>)
 80007e2:	f7ff fd83 	bl	80002ec <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState=ready;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <Decide_whatNext+0x9c>)
 80007e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ec:	2203      	movs	r2, #3
 80007ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001d4 	.word	0x200001d4
 80007fc:	20000028 	.word	0x20000028
 8000800:	200001cc 	.word	0x200001cc

08000804 <PendSV_Handler>:
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register as CPU push xpsr to r0"
	//I Think this line haven't affect
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000804:	4b72      	ldr	r3, [pc, #456]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000806:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800080a:	f3ef 8009 	mrs	r0, PSP
 800080e:	4602      	mov	r2, r0
 8000810:	619a      	str	r2, [r3, #24]

	//using this Current_PSP(Pointer) to store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 8000812:	4b6f      	ldr	r3, [pc, #444]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000814:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000818:	699a      	ldr	r2, [r3, #24]
 800081a:	3a04      	subs	r2, #4
 800081c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r4":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 800081e:	4b6c      	ldr	r3, [pc, #432]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000820:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4622      	mov	r2, r4
 8000828:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800082a:	4b69      	ldr	r3, [pc, #420]	; (80009d0 <PendSV_Handler+0x1cc>)
 800082c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	3a04      	subs	r2, #4
 8000834:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r5":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 8000836:	4b66      	ldr	r3, [pc, #408]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000838:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	462a      	mov	r2, r5
 8000840:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000842:	4b63      	ldr	r3, [pc, #396]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000844:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000848:	699a      	ldr	r2, [r3, #24]
 800084a:	3a04      	subs	r2, #4
 800084c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r6":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 800084e:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000850:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4632      	mov	r2, r6
 8000858:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800085a:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <PendSV_Handler+0x1cc>)
 800085c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000860:	699a      	ldr	r2, [r3, #24]
 8000862:	3a04      	subs	r2, #4
 8000864:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r7":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 8000866:	4b5a      	ldr	r3, [pc, #360]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000868:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	463a      	mov	r2, r7
 8000870:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000872:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000874:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000878:	699a      	ldr	r2, [r3, #24]
 800087a:	3a04      	subs	r2, #4
 800087c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r8":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 800087e:	4b54      	ldr	r3, [pc, #336]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000880:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4642      	mov	r2, r8
 8000888:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <PendSV_Handler+0x1cc>)
 800088c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	3a04      	subs	r2, #4
 8000894:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r9":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000898:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	464a      	mov	r2, r9
 80008a0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80008a2:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a8:	699a      	ldr	r2, [r3, #24]
 80008aa:	3a04      	subs	r2, #4
 80008ac:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r10":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 80008ae:	4b48      	ldr	r3, [pc, #288]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4652      	mov	r2, sl
 80008b8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008c0:	699a      	ldr	r2, [r3, #24]
 80008c2:	3a04      	subs	r2, #4
 80008c4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r11":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	465a      	mov	r2, fp
 80008d0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d8:	699a      	ldr	r2, [r3, #24]
 80008da:	3a04      	subs	r2, #4
 80008dc:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r12":"=r"(*(OS_Control.CurrentTask->Current_PSP)) );
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4662      	mov	r2, ip
 80008e8:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	OS_Control.CurrentTask=OS_Control.NextTask;
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008ec:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80008f0:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008f2:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask=NULL;
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <PendSV_Handler+0x1cc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	__asm volatile("mov r11 ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000900:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <PendSV_Handler+0x1cc>)
 800090c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000910:	699a      	ldr	r2, [r3, #24]
 8000912:	3204      	adds	r2, #4
 8000914:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10 ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000918:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000924:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000928:	699a      	ldr	r2, [r3, #24]
 800092a:	3204      	adds	r2, #4
 800092c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9  ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000930:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <PendSV_Handler+0x1cc>)
 800093c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000940:	699a      	ldr	r2, [r3, #24]
 8000942:	3204      	adds	r2, #4
 8000944:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8  ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000948:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000954:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000958:	699a      	ldr	r2, [r3, #24]
 800095a:	3204      	adds	r2, #4
 800095c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7  ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000960:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <PendSV_Handler+0x1cc>)
 800096c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000970:	699a      	ldr	r2, [r3, #24]
 8000972:	3204      	adds	r2, #4
 8000974:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6  ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000978:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000984:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	3204      	adds	r2, #4
 800098c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5  ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <PendSV_Handler+0x1cc>)
 8000990:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <PendSV_Handler+0x1cc>)
 800099c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a0:	699a      	ldr	r2, [r3, #24]
 80009a2:	3204      	adds	r2, #4
 80009a4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4  ,%0" : :"r"(*(OS_Control.CurrentTask->Current_PSP)) );
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <PendSV_Handler+0x1cc>)
 80009a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <PendSV_Handler+0x1cc>)
 80009b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	3204      	adds	r2, #4
 80009bc:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <PendSV_Handler+0x1cc>)
 80009c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f380 8809 	msr	PSP, r0

	__asm("BX LR");
 80009cc:	4770      	bx	lr
}
 80009ce:	bf00      	nop
 80009d0:	20000028 	.word	0x20000028

080009d4 <OS_SVC>:

//Handler Mode
void OS_SVC (int* stackFrame)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> r0 -> argument0 = StackFramePointer
	//OS_SVC_Set Stack -> r0,r1,r2,r3,r12,LR,PC,xPSR
	unsigned char SVC_number ;
	SVC_number= *((unsigned char *)(((unsigned char *)stackFrame[6])-2));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3318      	adds	r3, #24
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b02      	subs	r3, #2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	73fb      	strb	r3, [r7, #15]
	switch(SVC_number)
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db1a      	blt.n	8000a24 <OS_SVC+0x50>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	dd01      	ble.n	80009f6 <OS_SVC+0x22>
 80009f2:	2b02      	cmp	r3, #2


		break;
	case SVC_TaskWaitingTime:

		break;
 80009f4:	e016      	b.n	8000a24 <OS_SVC+0x50>
		MYRTOS_Update_Schedule_tables();
 80009f6:	f7ff fe53 	bl	80006a0 <MYRTOS_Update_Schedule_tables>
		if(OS_Control.OSmodeID == OsRunning)
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <OS_SVC+0x58>)
 80009fc:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10e      	bne.n	8000a22 <OS_SVC+0x4e>
			if(strcmp(OS_Control.CurrentTask->TaskName,"idleTask") !=0)
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <OS_SVC+0x58>)
 8000a06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a0a:	331c      	adds	r3, #28
 8000a0c:	4908      	ldr	r1, [pc, #32]	; (8000a30 <OS_SVC+0x5c>)
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fbae 	bl	8000170 <strcmp>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <OS_SVC+0x4e>
				Decide_whatNext();
 8000a1a:	f7ff fea1 	bl	8000760 <Decide_whatNext>
				trigger_OS_PendSV();
 8000a1e:	f7ff fc1d 	bl	800025c <trigger_OS_PendSV>
		break;
 8000a22:	bf00      	nop
	}


}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000028 	.word	0x20000028
 8000a30:	08000ff8 	.word	0x08000ff8

08000a34 <MYRTOS_OS_SVC_SET>:

//Thread Mode
void MYRTOS_OS_SVC_SET(SVC_ID ID)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d006      	beq.n	8000a52 <MYRTOS_OS_SVC_SET+0x1e>
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d006      	beq.n	8000a56 <MYRTOS_OS_SVC_SET+0x22>
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d000      	beq.n	8000a4e <MYRTOS_OS_SVC_SET+0x1a>
		break;
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}
}
 8000a4c:	e005      	b.n	8000a5a <MYRTOS_OS_SVC_SET+0x26>
		__asm("svc #0x00");
 8000a4e:	df00      	svc	0
		break;
 8000a50:	e003      	b.n	8000a5a <MYRTOS_OS_SVC_SET+0x26>
		__asm("svc #0x01");
 8000a52:	df01      	svc	1
		break;
 8000a54:	e001      	b.n	8000a5a <MYRTOS_OS_SVC_SET+0x26>
		__asm("svc #0x02");
 8000a56:	df02      	svc	2
		break;
 8000a58:	bf00      	nop
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <MYRTOS_ActivateTask>:
MYRTOS_errorID MYRTOS_ActivateTask(Task_ref *Tref)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	Tref->TaskState=Waiting;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2202      	movs	r2, #2
 8000a70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_SET(SVC_ActivateTask);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ffdd 	bl	8000a34 <MYRTOS_OS_SVC_SET>

}
 8000a7a:	bf00      	nop
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <MYRTOS_STARTOS>:
}



void MYRTOS_STARTOS()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID=OsRunning;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MYRTOS_STARTOS+0x54>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task idle Task"
	OS_Control.CurrentTask=&MYRTOS_idleTask;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MYRTOS_STARTOS+0x54>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MYRTOS_STARTOS+0x58>)
 8000a94:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000a98:	4810      	ldr	r0, [pc, #64]	; (8000adc <MYRTOS_STARTOS+0x58>)
 8000a9a:	f7ff ffe3 	bl	8000a64 <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Tiker(); // 1ms
 8000a9e:	f7ff fbeb 	bl	8000278 <Start_Tiker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MYRTOS_STARTOS+0x54>)
 8000aa4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode Sp from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 8000ab0:	f3ef 8014 	mrs	r0, CONTROL
 8000ab4:	f04f 0102 	mov.w	r1, #2
 8000ab8:	ea41 0000 	orr.w	r0, r1, r0
 8000abc:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_to_unprivileged;
 8000ac0:	f3ef 8314 	mrs	r3, CONTROL
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	f383 8814 	msr	CONTROL, r3

	MYRTOS_idleTask.p_TaskEntry();
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <MYRTOS_STARTOS+0x58>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	4798      	blx	r3

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	200001e8 	.word	0x200001e8

08000ae0 <EXTI0_IRQHandler>:
 * ===================      ISR Functions    ====================
 * ==============================================================
 */

void EXTI0_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	//Clear by Writing a '1' into the bit Pending register (EXTI_PR)
	EXTI->PR |=1<<0;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <EXTI0_IRQHandler+0x1c>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <EXTI0_IRQHandler+0x1c>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <EXTI0_IRQHandler+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4798      	blx	r3
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010400 	.word	0x40010400
 8000b00:	200003c0 	.word	0x200003c0

08000b04 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<1;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI1_IRQHandler+0x1c>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI1_IRQHandler+0x1c>)
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EXTI1_IRQHandler+0x20>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4798      	blx	r3
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010400 	.word	0x40010400
 8000b24:	200003c0 	.word	0x200003c0

08000b28 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<2;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <EXTI2_IRQHandler+0x1c>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <EXTI2_IRQHandler+0x1c>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <EXTI2_IRQHandler+0x20>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4798      	blx	r3
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010400 	.word	0x40010400
 8000b48:	200003c0 	.word	0x200003c0

08000b4c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<3;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <EXTI3_IRQHandler+0x1c>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <EXTI3_IRQHandler+0x1c>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <EXTI3_IRQHandler+0x20>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	4798      	blx	r3
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40010400 	.word	0x40010400
 8000b6c:	200003c0 	.word	0x200003c0

08000b70 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<4;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <EXTI4_IRQHandler+0x1c>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <EXTI4_IRQHandler+0x1c>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <EXTI4_IRQHandler+0x20>)
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	4798      	blx	r3

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010400 	.word	0x40010400
 8000b90:	200003c0 	.word	0x200003c0

08000b94 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |=(1<<5)	;GP_IRQ_CallBack[5]();	}
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	f003 0320 	and.w	r3, r3, #32
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d008      	beq.n	8000bb6 <EXTI9_5_IRQHandler+0x22>
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6153      	str	r3, [r2, #20]
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <EXTI9_5_IRQHandler+0xa4>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |=(1<<6)	;GP_IRQ_CallBack[6]();	}
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d008      	beq.n	8000bd4 <EXTI9_5_IRQHandler+0x40>
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <EXTI9_5_IRQHandler+0xa4>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |=(1<<7)	;GP_IRQ_CallBack[7]();	}
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d008      	beq.n	8000bf2 <EXTI9_5_IRQHandler+0x5e>
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bea:	6153      	str	r3, [r2, #20]
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <EXTI9_5_IRQHandler+0xa4>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |=(1<<8)	;GP_IRQ_CallBack[8]();	}
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d008      	beq.n	8000c10 <EXTI9_5_IRQHandler+0x7c>
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <EXTI9_5_IRQHandler+0xa4>)
 8000c0c:	6a1b      	ldr	r3, [r3, #32]
 8000c0e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |=(1<<9)	;GP_IRQ_CallBack[9]();	}
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d008      	beq.n	8000c2e <EXTI9_5_IRQHandler+0x9a>
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <EXTI9_5_IRQHandler+0xa0>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6153      	str	r3, [r2, #20]
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <EXTI9_5_IRQHandler+0xa4>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	4798      	blx	r3

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40010400 	.word	0x40010400
 8000c38:	200003c0 	.word	0x200003c0

08000c3c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |=(1<<10)	;GP_IRQ_CallBack[10]();	}
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <EXTI15_10_IRQHandler+0x22>
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6153      	str	r3, [r2, #20]
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <EXTI15_10_IRQHandler+0xc0>)
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |=(1<<11)	;GP_IRQ_CallBack[11]();	}
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d008      	beq.n	8000c7c <EXTI15_10_IRQHandler+0x40>
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <EXTI15_10_IRQHandler+0xc0>)
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |=(1<<12)	;GP_IRQ_CallBack[12]();	}
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d008      	beq.n	8000c9a <EXTI15_10_IRQHandler+0x5e>
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c92:	6153      	str	r3, [r2, #20]
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <EXTI15_10_IRQHandler+0xc0>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |=(1<<13)	;GP_IRQ_CallBack[13]();	}
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d008      	beq.n	8000cb8 <EXTI15_10_IRQHandler+0x7c>
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <EXTI15_10_IRQHandler+0xc0>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb6:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |=(1<<14)	;GP_IRQ_CallBack[14]();	}
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d008      	beq.n	8000cd6 <EXTI15_10_IRQHandler+0x9a>
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6153      	str	r3, [r2, #20]
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <EXTI15_10_IRQHandler+0xc0>)
 8000cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |=(1<<15)	;GP_IRQ_CallBack[15]();	}
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d008      	beq.n	8000cf4 <EXTI15_10_IRQHandler+0xb8>
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <EXTI15_10_IRQHandler+0xbc>)
 8000ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <EXTI15_10_IRQHandler+0xc0>)
 8000cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf2:	4798      	blx	r3
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40010400 	.word	0x40010400
 8000cfc:	200003c0 	.word	0x200003c0

08000d00 <SPI1_IRQHandler>:
 * 								IRQ
 * =========================================================
 */

void SPI1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE =((SPI1->SPI_SR & (1<<1)) >> 1);
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <SPI1_IRQHandler+0x54>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	085b      	lsrs	r3, r3, #1
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	793b      	ldrb	r3, [r7, #4]
 8000d14:	f362 0300 	bfi	r3, r2, #0, #1
 8000d18:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE =((SPI1->SPI_SR & (1<<0)) >> 0);
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <SPI1_IRQHandler+0x54>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	793b      	ldrb	r3, [r7, #4]
 8000d26:	f362 0341 	bfi	r3, r2, #1, #1
 8000d2a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI =((SPI1->SPI_SR & (1<<4)) >> 4);
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <SPI1_IRQHandler+0x54>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	f362 0382 	bfi	r3, r2, #2, #1
 8000d3e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SPI1_IRQHandler+0x58>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	7938      	ldrb	r0, [r7, #4]
 8000d48:	4798      	blx	r3
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013000 	.word	0x40013000
 8000d58:	2000001c 	.word	0x2000001c

08000d5c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE =((SPI1->SPI_SR & (1<<1))>>1);
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <SPI2_IRQHandler+0x54>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	793b      	ldrb	r3, [r7, #4]
 8000d70:	f362 0300 	bfi	r3, r2, #0, #1
 8000d74:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE =((SPI1->SPI_SR & (1<<0))>>0);
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <SPI2_IRQHandler+0x54>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	793b      	ldrb	r3, [r7, #4]
 8000d82:	f362 0341 	bfi	r3, r2, #1, #1
 8000d86:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI =((SPI1->SPI_SR & (1<<4))>>4);
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <SPI2_IRQHandler+0x54>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	793b      	ldrb	r3, [r7, #4]
 8000d96:	f362 0382 	bfi	r3, r2, #2, #1
 8000d9a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SPI2_IRQHandler+0x58>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	7938      	ldrb	r0, [r7, #4]
 8000da4:	4798      	blx	r3
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40013000 	.word	0x40013000
 8000db4:	2000001c 	.word	0x2000001c

08000db8 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
//	Global_UART_Config->P_IRQ_CallBack();
	pFun[0]();
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <USART1_IRQHandler+0x10>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4798      	blx	r3
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200003fc 	.word	0x200003fc

08000dcc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
//	Global_UART_Config->P_IRQ_CallBack();
	pFun[1]();
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <USART2_IRQHandler+0x10>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4798      	blx	r3
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003fc 	.word	0x200003fc

08000de0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
//	Global_UART_Config->P_IRQ_CallBack();
	pFun[2]();
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <USART3_IRQHandler+0x10>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4798      	blx	r3
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200003fc 	.word	0x200003fc

08000df4 <task1>:

Task_ref Task1,Task2,Task3;
unsigned char  Task1LED ,Task2LED,Task3LED,Task4LED;

void task1()
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	while(1){
		//Task 1 Code
		Task1LED ^=1;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <task1+0x14>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b01      	ldr	r3, [pc, #4]	; (8000e08 <task1+0x14>)
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e7f7      	b.n	8000df8 <task1+0x4>
 8000e08:	20000494 	.word	0x20000494

08000e0c <task2>:
	}
}
void task2()
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	while(1){
		//Task 2 Code
		Task2LED ^=1;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <task2+0x14>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f083 0301 	eor.w	r3, r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <task2+0x14>)
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e7f7      	b.n	8000e10 <task2+0x4>
 8000e20:	2000044d 	.word	0x2000044d

08000e24 <task3>:
	}
}
void task3()
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	while(1){
		//Task 2 Code
		Task3LED ^=1;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <task3+0x14>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	f083 0301 	eor.w	r3, r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b01      	ldr	r3, [pc, #4]	; (8000e38 <task3+0x14>)
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e7f7      	b.n	8000e28 <task3+0x4>
 8000e38:	200004dc 	.word	0x200004dc

08000e3c <main>:
	}
}

int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	MYRTOS_errorID error ;
	//HW_Init(Initialize CLockTree, RestController)
	HW_init();
 8000e42:	f7ff fa01 	bl	8000248 <HW_init>

	if(MYRTOS_init()!= NoError)
 8000e46:	f7ff fb21 	bl	800048c <MYRTOS_init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d000      	beq.n	8000e52 <main+0x16>
		while(1);
 8000e50:	e7fe      	b.n	8000e50 <main+0x14>


	Task1.Stack_Size=1024;
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <main+0xd8>)
 8000e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e58:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry=task1;
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <main+0xd8>)
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <main+0xdc>)
 8000e5e:	609a      	str	r2, [r3, #8]
	Task1.priority=3;
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <main+0xd8>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName ,"task_1");
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <main+0xe0>)
 8000e68:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <main+0xe4>)
 8000e6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6e:	6018      	str	r0, [r3, #0]
 8000e70:	3304      	adds	r3, #4
 8000e72:	8019      	strh	r1, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	0c0a      	lsrs	r2, r1, #16
 8000e78:	701a      	strb	r2, [r3, #0]


	Task2.Stack_Size=1024;
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <main+0xe8>)
 8000e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e80:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry=task2;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <main+0xe8>)
 8000e84:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <main+0xec>)
 8000e86:	609a      	str	r2, [r3, #8]
	Task2.priority=3;
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <main+0xe8>)
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName ,"task_2");
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <main+0xf0>)
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <main+0xf4>)
 8000e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e96:	6018      	str	r0, [r3, #0]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	8019      	strh	r1, [r3, #0]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	0c0a      	lsrs	r2, r1, #16
 8000ea0:	701a      	strb	r2, [r3, #0]



	Task3.Stack_Size=1024;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <main+0xf8>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea8:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry=task3;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <main+0xf8>)
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <main+0xfc>)
 8000eae:	609a      	str	r2, [r3, #8]
	Task3.priority=3;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <main+0xf8>)
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName ,"task_3");
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <main+0x100>)
 8000eb8:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <main+0x104>)
 8000eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ebe:	6018      	str	r0, [r3, #0]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	8019      	strh	r1, [r3, #0]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	0c0a      	lsrs	r2, r1, #16
 8000ec8:	701a      	strb	r2, [r3, #0]

	error+=MYRTOS_CreateTask(&Task1);
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <main+0xd8>)
 8000ecc:	f7ff fb62 	bl	8000594 <MYRTOS_CreateTask>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	71fb      	strb	r3, [r7, #7]
	error+=MYRTOS_CreateTask(&Task2);
 8000eda:	4812      	ldr	r0, [pc, #72]	; (8000f24 <main+0xe8>)
 8000edc:	f7ff fb5a 	bl	8000594 <MYRTOS_CreateTask>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	error+=MYRTOS_CreateTask(&Task3);
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <main+0xf8>)
 8000eec:	f7ff fb52 	bl	8000594 <MYRTOS_CreateTask>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	71fb      	strb	r3, [r7, #7]

	MYRTOS_ActivateTask(&Task1);
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <main+0xd8>)
 8000efc:	f7ff fdb2 	bl	8000a64 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task2);
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <main+0xe8>)
 8000f02:	f7ff fdaf 	bl	8000a64 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task3);
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <main+0xf8>)
 8000f08:	f7ff fdac 	bl	8000a64 <MYRTOS_ActivateTask>
	MYRTOS_STARTOS();
 8000f0c:	f7ff fdba 	bl	8000a84 <MYRTOS_STARTOS>

	while (1)
 8000f10:	e7fe      	b.n	8000f10 <main+0xd4>
 8000f12:	bf00      	nop
 8000f14:	20000408 	.word	0x20000408
 8000f18:	08000df5 	.word	0x08000df5
 8000f1c:	20000424 	.word	0x20000424
 8000f20:	08001004 	.word	0x08001004
 8000f24:	20000498 	.word	0x20000498
 8000f28:	08000e0d 	.word	0x08000e0d
 8000f2c:	200004b4 	.word	0x200004b4
 8000f30:	0800100c 	.word	0x0800100c
 8000f34:	20000450 	.word	0x20000450
 8000f38:	08000e25 	.word	0x08000e25
 8000f3c:	2000046c 	.word	0x2000046c
 8000f40:	08001014 	.word	0x08001014

08000f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f46:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f48:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f72:	f000 f811 	bl	8000f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f76:	f7ff ff61 	bl	8000e3c <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   r0, =_estack
 8000f7c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f88:	08001024 	.word	0x08001024
  ldr r2, =_sbss
 8000f8c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f90:	200004e0 	.word	0x200004e0

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <__libc_init_array>:
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	4e0c      	ldr	r6, [pc, #48]	; (8000fd0 <__libc_init_array+0x38>)
 8000f9e:	4c0d      	ldr	r4, [pc, #52]	; (8000fd4 <__libc_init_array+0x3c>)
 8000fa0:	1ba4      	subs	r4, r4, r6
 8000fa2:	10a4      	asrs	r4, r4, #2
 8000fa4:	42a5      	cmp	r5, r4
 8000fa6:	d109      	bne.n	8000fbc <__libc_init_array+0x24>
 8000fa8:	f000 f81a 	bl	8000fe0 <_init>
 8000fac:	2500      	movs	r5, #0
 8000fae:	4e0a      	ldr	r6, [pc, #40]	; (8000fd8 <__libc_init_array+0x40>)
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	; (8000fdc <__libc_init_array+0x44>)
 8000fb2:	1ba4      	subs	r4, r4, r6
 8000fb4:	10a4      	asrs	r4, r4, #2
 8000fb6:	42a5      	cmp	r5, r4
 8000fb8:	d105      	bne.n	8000fc6 <__libc_init_array+0x2e>
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
 8000fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc0:	4798      	blx	r3
 8000fc2:	3501      	adds	r5, #1
 8000fc4:	e7ee      	b.n	8000fa4 <__libc_init_array+0xc>
 8000fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fca:	4798      	blx	r3
 8000fcc:	3501      	adds	r5, #1
 8000fce:	e7f2      	b.n	8000fb6 <__libc_init_array+0x1e>
 8000fd0:	0800101c 	.word	0x0800101c
 8000fd4:	0800101c 	.word	0x0800101c
 8000fd8:	0800101c 	.word	0x0800101c
 8000fdc:	08001020 	.word	0x08001020

08000fe0 <_init>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	bf00      	nop
 8000fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe6:	bc08      	pop	{r3}
 8000fe8:	469e      	mov	lr, r3
 8000fea:	4770      	bx	lr

08000fec <_fini>:
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fee:	bf00      	nop
 8000ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff2:	bc08      	pop	{r3}
 8000ff4:	469e      	mov	lr, r3
 8000ff6:	4770      	bx	lr
