
ARM_Lesson_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d14  08000d14  00010d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d20  08000d20  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000d20  08000d20  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d20  08000d20  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000004  08000d2c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000d2c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fdc  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b4f  00000000  00000000  00024009  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000238  00000000  00000000  00024b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e0  00000000  00000000  00024d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000b5a  00000000  00000000  00024f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002276  00000000  00000000  00025aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c0c5  00000000  00000000  00027d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000079c  00000000  00000000  00033e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cfc 	.word	0x08000cfc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000cfc 	.word	0x08000cfc

08000170 <Enable_NVIC>:
 * ===============================================================
 * 				Generic Functions
 * ===============================================================
 */
	void Enable_NVIC(uint16_t IRQ)
	{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
		switch (IRQ)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
		{
		case 0:
			NVIC_IRQ6_EXTI0_Enable;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
			break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Enable;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
			break;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Enable;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
			break;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Enable;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
			break;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Enable;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
			break;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Enable;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
			break;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Enable;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
			break;
 8000228:	bf00      	nop
		}
	}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:

	void Disable_NVIC(uint16_t IRQ)
	{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
		switch (IRQ)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
			break;
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
			break;
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
			break;
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
			break;
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
			break;
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
			break;
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
			break;
 80002f4:	bf00      	nop
		}
	}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Updata_EXTI>:




void Updata_EXTI(EXTI_PinConfig_t * EXTI_Config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//1-Configure GPIO to be AF input -> Floating INPUT
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber=EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa4e 	bl	80007c6 <MCAL_GPIO_Init>
	//=================================================

	//2-Update AFIO to Route between EXTI Line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index=EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position=(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4)*4;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]

	//Clear The four bit first
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xf << AFIO_EXTICR_Position);
 8000344:	4a5b      	ldr	r2, [pc, #364]	; (80004b4 <Updata_EXTI+0x1ac>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	3302      	adds	r3, #2
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	4956      	ldr	r1, [pc, #344]	; (80004b4 <Updata_EXTI+0x1ac>)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4002      	ands	r2, r0
 8000360:	3302      	adds	r3, #2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Set
	AFIO->EXTICR[AFIO_EXTICR_index] |= (AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF <<AFIO_EXTICR_Position);
 8000366:	4a53      	ldr	r2, [pc, #332]	; (80004b4 <Updata_EXTI+0x1ac>)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	3302      	adds	r3, #2
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4950      	ldr	r1, [pc, #320]	; (80004b8 <Updata_EXTI+0x1b0>)
 8000376:	428b      	cmp	r3, r1
 8000378:	d006      	beq.n	8000388 <Updata_EXTI+0x80>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	494f      	ldr	r1, [pc, #316]	; (80004bc <Updata_EXTI+0x1b4>)
 8000380:	428b      	cmp	r3, r1
 8000382:	d101      	bne.n	8000388 <Updata_EXTI+0x80>
 8000384:	2101      	movs	r1, #1
 8000386:	e000      	b.n	800038a <Updata_EXTI+0x82>
 8000388:	2100      	movs	r1, #0
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	200f      	movs	r0, #15
 800038e:	fa00 f303 	lsl.w	r3, r0, r3
 8000392:	400b      	ands	r3, r1
 8000394:	4618      	mov	r0, r3
 8000396:	4947      	ldr	r1, [pc, #284]	; (80004b4 <Updata_EXTI+0x1ac>)
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	4302      	orrs	r2, r0
 800039c:	3302      	adds	r3, #2
 800039e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//=================================================


	//3-Update Rising and Falling Edge
	//Clearing
	EXTI->RTSR &=~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003a2:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <Updata_EXTI+0x1b8>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	8812      	ldrh	r2, [r2, #0]
 80003aa:	4611      	mov	r1, r2
 80003ac:	2201      	movs	r2, #1
 80003ae:	408a      	lsls	r2, r1
 80003b0:	43d2      	mvns	r2, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <Updata_EXTI+0x1b8>)
 80003b6:	400b      	ands	r3, r1
 80003b8:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003ba:	4b41      	ldr	r3, [pc, #260]	; (80004c0 <Updata_EXTI+0x1b8>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	8812      	ldrh	r2, [r2, #0]
 80003c2:	4611      	mov	r1, r2
 80003c4:	2201      	movs	r2, #1
 80003c6:	408a      	lsls	r2, r1
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a3c      	ldr	r2, [pc, #240]	; (80004c0 <Updata_EXTI+0x1b8>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	60d3      	str	r3, [r2, #12]

	//Set The Value
	if(EXTI_Config->Trigger_Case==EXTI_Trigger_RISING)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7b1b      	ldrb	r3, [r3, #12]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d10b      	bne.n	80003f2 <Updata_EXTI+0xea>
	{
		EXTI->RTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003da:	4b39      	ldr	r3, [pc, #228]	; (80004c0 <Updata_EXTI+0x1b8>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	8812      	ldrh	r2, [r2, #0]
 80003e2:	4611      	mov	r1, r2
 80003e4:	2201      	movs	r2, #1
 80003e6:	408a      	lsls	r2, r1
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a35      	ldr	r2, [pc, #212]	; (80004c0 <Updata_EXTI+0x1b8>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	6093      	str	r3, [r2, #8]
 80003f0:	e029      	b.n	8000446 <Updata_EXTI+0x13e>
	}else if(EXTI_Config->Trigger_Case==EXTI_Trigger_FALLING)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	7b1b      	ldrb	r3, [r3, #12]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d10b      	bne.n	8000412 <Updata_EXTI+0x10a>
	{
		EXTI->FTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003fa:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <Updata_EXTI+0x1b8>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	8812      	ldrh	r2, [r2, #0]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	4611      	mov	r1, r2
 800040a:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <Updata_EXTI+0x1b8>)
 800040c:	430b      	orrs	r3, r1
 800040e:	60d3      	str	r3, [r2, #12]
 8000410:	e019      	b.n	8000446 <Updata_EXTI+0x13e>
	}else if(EXTI_Config->Trigger_Case==EXTI_Trigger_RisingAndFalling)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	7b1b      	ldrb	r3, [r3, #12]
 8000416:	2b02      	cmp	r3, #2
 8000418:	d115      	bne.n	8000446 <Updata_EXTI+0x13e>
	{
		EXTI->RTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800041a:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <Updata_EXTI+0x1b8>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	8812      	ldrh	r2, [r2, #0]
 8000422:	4611      	mov	r1, r2
 8000424:	2201      	movs	r2, #1
 8000426:	408a      	lsls	r2, r1
 8000428:	4611      	mov	r1, r2
 800042a:	4a25      	ldr	r2, [pc, #148]	; (80004c0 <Updata_EXTI+0x1b8>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <Updata_EXTI+0x1b8>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	4611      	mov	r1, r2
 800043a:	2201      	movs	r2, #1
 800043c:	408a      	lsls	r2, r1
 800043e:	4611      	mov	r1, r2
 8000440:	4a1f      	ldr	r2, [pc, #124]	; (80004c0 <Updata_EXTI+0x1b8>)
 8000442:	430b      	orrs	r3, r1
 8000444:	60d3      	str	r3, [r2, #12]
	}

	//=================================================
	//4-Update IRQ Handling CALLBACK
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber]=EXTI_Config->P_IRQ_CallBack;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <Updata_EXTI+0x1bc>)
 8000452:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//=================================================
	//5-Enable/Disable IRQ and NVIC

	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	7b5b      	ldrb	r3, [r3, #13]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d110      	bne.n	8000480 <Updata_EXTI+0x178>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <Updata_EXTI+0x1b8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	8812      	ldrh	r2, [r2, #0]
 8000466:	4611      	mov	r1, r2
 8000468:	2201      	movs	r2, #1
 800046a:	408a      	lsls	r2, r1
 800046c:	4611      	mov	r1, r2
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <Updata_EXTI+0x1b8>)
 8000470:	430b      	orrs	r3, r1
 8000472:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff fe79 	bl	8000170 <Enable_NVIC>
	{
		EXTI->IMR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}

}
 800047e:	e014      	b.n	80004aa <Updata_EXTI+0x1a2>
	}else if (EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7b5b      	ldrb	r3, [r3, #13]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d110      	bne.n	80004aa <Updata_EXTI+0x1a2>
		EXTI->IMR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <Updata_EXTI+0x1b8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	8812      	ldrh	r2, [r2, #0]
 8000490:	4611      	mov	r1, r2
 8000492:	2201      	movs	r2, #1
 8000494:	408a      	lsls	r2, r1
 8000496:	43d2      	mvns	r2, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a09      	ldr	r2, [pc, #36]	; (80004c0 <Updata_EXTI+0x1b8>)
 800049c:	400b      	ands	r3, r1
 800049e:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fec9 	bl	800023c <Disable_NVIC>
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40010000 	.word	0x40010000
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40010400 	.word	0x40010400
 80004c4:	20000028 	.word	0x20000028

080004c8 <MCAL_EXTI_GPIO_Init>:
 *						But LQFP48 Package has only GPIO A,B , Part of C/D exported as external PINs from The MCU
 *						- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 *==========================================================================================
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	Updata_EXTI(EXTI_Config);
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff ff19 	bl	8000308 <Updata_EXTI>
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <EXTI0_IRQHandler>:
 * ===================      ISR Functions    ====================
 * ==============================================================
 */

void EXTI0_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	//Clear by Writing a '1' into the bit Pending register (EXTI_PR)
	EXTI->PR |=1<<0;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <EXTI0_IRQHandler+0x1c>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <EXTI0_IRQHandler+0x1c>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <EXTI0_IRQHandler+0x20>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4798      	blx	r3
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40010400 	.word	0x40010400
 8000500:	20000028 	.word	0x20000028

08000504 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<1;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <EXTI1_IRQHandler+0x1c>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <EXTI1_IRQHandler+0x1c>)
 800050e:	f043 0302 	orr.w	r3, r3, #2
 8000512:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <EXTI1_IRQHandler+0x20>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	4798      	blx	r3
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010400 	.word	0x40010400
 8000524:	20000028 	.word	0x20000028

08000528 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<2;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <EXTI2_IRQHandler+0x1c>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <EXTI2_IRQHandler+0x1c>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <EXTI2_IRQHandler+0x20>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4798      	blx	r3
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40010400 	.word	0x40010400
 8000548:	20000028 	.word	0x20000028

0800054c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<3;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <EXTI3_IRQHandler+0x1c>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <EXTI3_IRQHandler+0x1c>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <EXTI3_IRQHandler+0x20>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	4798      	blx	r3
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010400 	.word	0x40010400
 800056c:	20000028 	.word	0x20000028

08000570 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	EXTI->PR |=1<<4;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <EXTI4_IRQHandler+0x1c>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <EXTI4_IRQHandler+0x1c>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <EXTI4_IRQHandler+0x20>)
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	4798      	blx	r3

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010400 	.word	0x40010400
 8000590:	20000028 	.word	0x20000028

08000594 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |=(1<<5)	;GP_IRQ_CallBack[5]();	}
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f003 0320 	and.w	r3, r3, #32
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d008      	beq.n	80005b6 <EXTI9_5_IRQHandler+0x22>
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	6153      	str	r3, [r2, #20]
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <EXTI9_5_IRQHandler+0xa4>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |=(1<<6)	;GP_IRQ_CallBack[6]();	}
 80005b6:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d008      	beq.n	80005d4 <EXTI9_5_IRQHandler+0x40>
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <EXTI9_5_IRQHandler+0xa4>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |=(1<<7)	;GP_IRQ_CallBack[7]();	}
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <EXTI9_5_IRQHandler+0x5e>
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <EXTI9_5_IRQHandler+0xa4>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |=(1<<8)	;GP_IRQ_CallBack[8]();	}
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <EXTI9_5_IRQHandler+0x7c>
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <EXTI9_5_IRQHandler+0xa4>)
 800060c:	6a1b      	ldr	r3, [r3, #32]
 800060e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |=(1<<9)	;GP_IRQ_CallBack[9]();	}
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <EXTI9_5_IRQHandler+0x9a>
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <EXTI9_5_IRQHandler+0xa0>)
 8000622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000626:	6153      	str	r3, [r2, #20]
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <EXTI9_5_IRQHandler+0xa4>)
 800062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062c:	4798      	blx	r3

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40010400 	.word	0x40010400
 8000638:	20000028 	.word	0x20000028

0800063c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |=(1<<10)	;GP_IRQ_CallBack[10]();	}
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <EXTI15_10_IRQHandler+0x22>
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 8000652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <EXTI15_10_IRQHandler+0xc0>)
 800065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |=(1<<11)	;GP_IRQ_CallBack[11]();	}
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000666:	2b00      	cmp	r3, #0
 8000668:	d008      	beq.n	800067c <EXTI15_10_IRQHandler+0x40>
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 8000670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <EXTI15_10_IRQHandler+0xc0>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |=(1<<12)	;GP_IRQ_CallBack[12]();	}
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000684:	2b00      	cmp	r3, #0
 8000686:	d008      	beq.n	800069a <EXTI15_10_IRQHandler+0x5e>
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 800068e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000692:	6153      	str	r3, [r2, #20]
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <EXTI15_10_IRQHandler+0xc0>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |=(1<<13)	;GP_IRQ_CallBack[13]();	}
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d008      	beq.n	80006b8 <EXTI15_10_IRQHandler+0x7c>
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <EXTI15_10_IRQHandler+0xc0>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b6:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |=(1<<14)	;GP_IRQ_CallBack[14]();	}
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <EXTI15_10_IRQHandler+0x9a>
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <EXTI15_10_IRQHandler+0xc0>)
 80006d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |=(1<<15)	;GP_IRQ_CallBack[15]();	}
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d008      	beq.n	80006f4 <EXTI15_10_IRQHandler+0xb8>
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <EXTI15_10_IRQHandler+0xbc>)
 80006e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <EXTI15_10_IRQHandler+0xc0>)
 80006f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f2:	4798      	blx	r3
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40010400 	.word	0x40010400
 80006fc:	20000028 	.word	0x20000028

08000700 <Get_CRLH_Position>:
 *      Author: Guirguis Hedia
 */
#include "STM32_F103C6_GPIO_Driver.h"

uint8_t Get_CRLH_Position (uint16_t PinNumber)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	2b80      	cmp	r3, #128	; 0x80
 800070e:	d042      	beq.n	8000796 <Get_CRLH_Position+0x96>
 8000710:	2b80      	cmp	r3, #128	; 0x80
 8000712:	dc11      	bgt.n	8000738 <Get_CRLH_Position+0x38>
 8000714:	2b08      	cmp	r3, #8
 8000716:	d036      	beq.n	8000786 <Get_CRLH_Position+0x86>
 8000718:	2b08      	cmp	r3, #8
 800071a:	dc06      	bgt.n	800072a <Get_CRLH_Position+0x2a>
 800071c:	2b02      	cmp	r3, #2
 800071e:	d02e      	beq.n	800077e <Get_CRLH_Position+0x7e>
 8000720:	2b04      	cmp	r3, #4
 8000722:	d02e      	beq.n	8000782 <Get_CRLH_Position+0x82>
 8000724:	2b01      	cmp	r3, #1
 8000726:	d028      	beq.n	800077a <Get_CRLH_Position+0x7a>
 8000728:	e047      	b.n	80007ba <Get_CRLH_Position+0xba>
 800072a:	2b20      	cmp	r3, #32
 800072c:	d02f      	beq.n	800078e <Get_CRLH_Position+0x8e>
 800072e:	2b40      	cmp	r3, #64	; 0x40
 8000730:	d02f      	beq.n	8000792 <Get_CRLH_Position+0x92>
 8000732:	2b10      	cmp	r3, #16
 8000734:	d029      	beq.n	800078a <Get_CRLH_Position+0x8a>
 8000736:	e040      	b.n	80007ba <Get_CRLH_Position+0xba>
 8000738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800073c:	d033      	beq.n	80007a6 <Get_CRLH_Position+0xa6>
 800073e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000742:	dc09      	bgt.n	8000758 <Get_CRLH_Position+0x58>
 8000744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000748:	d029      	beq.n	800079e <Get_CRLH_Position+0x9e>
 800074a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800074e:	d028      	beq.n	80007a2 <Get_CRLH_Position+0xa2>
 8000750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000754:	d021      	beq.n	800079a <Get_CRLH_Position+0x9a>
 8000756:	e030      	b.n	80007ba <Get_CRLH_Position+0xba>
 8000758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075c:	d027      	beq.n	80007ae <Get_CRLH_Position+0xae>
 800075e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000762:	dc03      	bgt.n	800076c <Get_CRLH_Position+0x6c>
 8000764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000768:	d01f      	beq.n	80007aa <Get_CRLH_Position+0xaa>
 800076a:	e026      	b.n	80007ba <Get_CRLH_Position+0xba>
 800076c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000770:	d01f      	beq.n	80007b2 <Get_CRLH_Position+0xb2>
 8000772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000776:	d01e      	beq.n	80007b6 <Get_CRLH_Position+0xb6>
 8000778:	e01f      	b.n	80007ba <Get_CRLH_Position+0xba>
	{
	//CRL Register Bit Position
	case GPIO_PIN_0:
		return 0;
 800077a:	2300      	movs	r3, #0
 800077c:	e01e      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800077e:	2304      	movs	r3, #4
 8000780:	e01c      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000782:	2308      	movs	r3, #8
 8000784:	e01a      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000786:	230c      	movs	r3, #12
 8000788:	e018      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800078a:	2310      	movs	r3, #16
 800078c:	e016      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800078e:	2314      	movs	r3, #20
 8000790:	e014      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000792:	2318      	movs	r3, #24
 8000794:	e012      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000796:	231c      	movs	r3, #28
 8000798:	e010      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;

		//CRH Register Bit Position
	case GPIO_PIN_8:
		return 0;
 800079a:	2300      	movs	r3, #0
 800079c:	e00e      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	e00c      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80007a2:	2308      	movs	r3, #8
 80007a4:	e00a      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80007a6:	230c      	movs	r3, #12
 80007a8:	e008      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80007aa:	2310      	movs	r3, #16
 80007ac:	e006      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80007ae:	2314      	movs	r3, #20
 80007b0:	e004      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	e002      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80007b6:	231c      	movs	r3, #28
 80007b8:	e000      	b.n	80007bc <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <MCAL_GPIO_Init>:
 * @retval			-none
 * Note				-STM32f103c6 MCU has GPIO A,B,C,D,E Modules
 * 					 but LQFP48 Package has only GPIO A,B,Part of C,D exported as external
 */
void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80007c6:	b590      	push	{r4, r7, lr}
 80007c8:	b085      	sub	sp, #20
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]


	//Port configuration register low (GPIOx_CRL) --> Configure Pins form 0:7
	//Port configuration register HIGH (GPIOx_CRH) --> Configure Pins form 8:15

	volatile uint32_t *configregister =NULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
	configregister= (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )? &GPIOx->CRL : &GPIOx->CRH  ;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2bff      	cmp	r3, #255	; 0xff
 80007de:	d801      	bhi.n	80007e4 <MCAL_GPIO_Init+0x1e>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	e001      	b.n	80007e8 <MCAL_GPIO_Init+0x22>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3304      	adds	r3, #4
 80007e8:	60bb      	str	r3, [r7, #8]

	//Clear MODEx[0:1] CNFx[0:1]
	(*configregister) &=~ (0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff86 	bl	8000700 <Get_CRLH_Position>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	230f      	movs	r3, #15
 80007fa:	4093      	lsls	r3, r2
 80007fc:	43da      	mvns	r2, r3
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	401a      	ands	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	601a      	str	r2, [r3, #0]

	//if PIN is OUTPUT
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD))
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	789b      	ldrb	r3, [r3, #2]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d00b      	beq.n	8000828 <MCAL_GPIO_Init+0x62>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	2b05      	cmp	r3, #5
 8000816:	d007      	beq.n	8000828 <MCAL_GPIO_Init+0x62>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	2b06      	cmp	r3, #6
 800081e:	d003      	beq.n	8000828 <MCAL_GPIO_Init+0x62>
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	2b07      	cmp	r3, #7
 8000826:	d10e      	bne.n	8000846 <MCAL_GPIO_Init+0x80>
	{
		//Set MODEx[0:1] CNFx[0:1]
		PIN_Config = ( (((PinConfig->GPIO_Mode -4 )<<2) | PinConfig->GPIO_Output_Speed) & 0xf) ;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	3b04      	subs	r3, #4
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	b25a      	sxtb	r2, r3
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	78db      	ldrb	r3, [r3, #3]
 8000836:	b25b      	sxtb	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b25b      	sxtb	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e02c      	b.n	80008a0 <MCAL_GPIO_Init+0xda>
	}
	// if Input Mode
	else  //MODE = 00 : input mode (reset state)
	{
		if(PinConfig->GPIO_Mode==GPIO_MODE_INPUT_FLO || PinConfig->GPIO_Mode == GPIO_MODE_Analog)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d003      	beq.n	8000856 <MCAL_GPIO_Init+0x90>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d107      	bne.n	8000866 <MCAL_GPIO_Init+0xa0>
		{
			//Set MODEx[0:1]-->00 & CNFx[0:1]
			PIN_Config = ( (((PinConfig->GPIO_Mode) << 2 ) | 0x0 )& 0xf);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	789b      	ldrb	r3, [r3, #2]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e01c      	b.n	80008a0 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_Mode==GPIO_MODE_AF_INPUT) //Consider it as input Floating
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d102      	bne.n	8000874 <MCAL_GPIO_Init+0xae>
		{
			//Set MODEx[0:1]-->00 & CNFx[0:1]
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2 ) | 0x0 )& 0xf);
 800086e:	2304      	movs	r3, #4
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e015      	b.n	80008a0 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			//Set MODEx[0:1]-->00 & CNFx[0:1]
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2 ) | 0x0 )& 0xf);
 8000874:	2308      	movs	r3, #8
 8000876:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	789b      	ldrb	r3, [r3, #2]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d107      	bne.n	8000890 <MCAL_GPIO_Init+0xca>
			{
				//				Table 20. Port bit configuration table PxODR=1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	8812      	ldrh	r2, [r2, #0]
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	e007      	b.n	80008a0 <MCAL_GPIO_Init+0xda>

			}else
			{
				GPIOx->ODR &=~ PinConfig->GPIO_PinNumber;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	8812      	ldrh	r2, [r2, #0]
 8000898:	43d2      	mvns	r2, r2
 800089a:	401a      	ands	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH Register To Select Mode and Speed
	(*configregister) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff2a 	bl	8000700 <Get_CRLH_Position>
 80008ac:	4603      	mov	r3, r0
 80008ae:	fa04 f203 	lsl.w	r2, r4, r3
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	431a      	orrs	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <SPI1_IRQHandler>:
 * 								IRQ
 * =========================================================
 */

void SPI1_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE =((SPI1->SPI_SR & (1<<1)) >> 1);
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <SPI1_IRQHandler+0x54>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	085b      	lsrs	r3, r3, #1
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	793b      	ldrb	r3, [r7, #4]
 80008d8:	f362 0300 	bfi	r3, r2, #0, #1
 80008dc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE =((SPI1->SPI_SR & (1<<0)) >> 0);
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <SPI1_IRQHandler+0x54>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	793b      	ldrb	r3, [r7, #4]
 80008ea:	f362 0341 	bfi	r3, r2, #1, #1
 80008ee:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI =((SPI1->SPI_SR & (1<<4)) >> 4);
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <SPI1_IRQHandler+0x54>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	793b      	ldrb	r3, [r7, #4]
 80008fe:	f362 0382 	bfi	r3, r2, #2, #1
 8000902:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <SPI1_IRQHandler+0x58>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	7938      	ldrb	r0, [r7, #4]
 800090c:	4798      	blx	r3
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40013000 	.word	0x40013000
 800091c:	20000020 	.word	0x20000020

08000920 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE =((SPI1->SPI_SR & (1<<1))>>1);
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <SPI2_IRQHandler+0x54>)
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	085b      	lsrs	r3, r3, #1
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	793b      	ldrb	r3, [r7, #4]
 8000934:	f362 0300 	bfi	r3, r2, #0, #1
 8000938:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE =((SPI1->SPI_SR & (1<<0))>>0);
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <SPI2_IRQHandler+0x54>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	793b      	ldrb	r3, [r7, #4]
 8000946:	f362 0341 	bfi	r3, r2, #1, #1
 800094a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI =((SPI1->SPI_SR & (1<<4))>>4);
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <SPI2_IRQHandler+0x54>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	091b      	lsrs	r3, r3, #4
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	793b      	ldrb	r3, [r7, #4]
 800095a:	f362 0382 	bfi	r3, r2, #2, #1
 800095e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SPI2_IRQHandler+0x58>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	7938      	ldrb	r0, [r7, #4]
 8000968:	4798      	blx	r3
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40013000 	.word	0x40013000
 8000978:	20000020 	.word	0x20000020

0800097c <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
//	Global_UART_Config->P_IRQ_CallBack();
	pFun[0]();
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <USART1_IRQHandler+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4798      	blx	r3
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000064 	.word	0x20000064

08000990 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
//	Global_UART_Config->P_IRQ_CallBack();
	pFun[1]();
 8000994:	4b02      	ldr	r3, [pc, #8]	; (80009a0 <USART2_IRQHandler+0x10>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4798      	blx	r3
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000064 	.word	0x20000064

080009a4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
//	Global_UART_Config->P_IRQ_CallBack();
	pFun[2]();
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <USART3_IRQHandler+0x10>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	4798      	blx	r3
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000064 	.word	0x20000064

080009b8 <SWITCH_CPU_AccessLevel>:
	privileged ,
	unprivileged
};

void SWITCH_CPU_AccessLevel(enum CPUAccessLevel level)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	switch(level){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <SWITCH_CPU_AccessLevel+0x16>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d00b      	beq.n	80009e4 <SWITCH_CPU_AccessLevel+0x2c>
				"msr CONTROL , r3");
		__asm("NOP");
		break;

	}
}
 80009cc:	e013      	b.n	80009f6 <SWITCH_CPU_AccessLevel+0x3e>
		__asm("NOP");
 80009ce:	bf00      	nop
		__asm("mrs r3, CONTROL  \n\t"
 80009d0:	f3ef 8314 	mrs	r3, CONTROL
 80009d4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	f383 8814 	msr	CONTROL, r3
		__asm("NOP");
 80009e0:	bf00      	nop
		break;
 80009e2:	e008      	b.n	80009f6 <SWITCH_CPU_AccessLevel+0x3e>
		__asm("NOP");
 80009e4:	bf00      	nop
		__asm("mrs r3, CONTROL 		\n\t"
 80009e6:	f3ef 8314 	mrs	r3, CONTROL
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	f383 8814 	msr	CONTROL, r3
		__asm("NOP");
 80009f2:	bf00      	nop
		break;
 80009f4:	bf00      	nop
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <NMI_Handler>:


void NMI_Handler (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <HardFault_Handler>:

void HardFault_Handler (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <BusFault_Handler>:

void BusFault_Handler (void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <EXTI9_CALLBACK>:

void EXTI9_CALLBACK(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	if(IRQ_Flag == 0 )
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <EXTI9_CALLBACK+0x38>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <EXTI9_CALLBACK+0x1a>
	{
		TASKA_flag=1;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <EXTI9_CALLBACK+0x3c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 1;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <EXTI9_CALLBACK+0x38>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
		TASKB_flag=1;
		IRQ_Flag = 0;

	}

}
 8000a3c:	e009      	b.n	8000a52 <EXTI9_CALLBACK+0x2e>
	}else if (IRQ_Flag == 1)
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <EXTI9_CALLBACK+0x38>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d105      	bne.n	8000a52 <EXTI9_CALLBACK+0x2e>
		TASKB_flag=1;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <EXTI9_CALLBACK+0x40>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
		IRQ_Flag = 0;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <EXTI9_CALLBACK+0x38>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000075 	.word	0x20000075
 8000a60:	20000074 	.word	0x20000074
 8000a64:	20000084 	.word	0x20000084

08000a68 <SVC_Handler>:

void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	SWITCH_CPU_AccessLevelPrivileged;
 8000a6c:	f3ef 8314 	mrs	r3, CONTROL
 8000a70:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a78:	f383 8814 	msr	CONTROL, r3
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <TaskA>:
int TaskA(int a, int b , int c)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]

	return a+b+c;
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	441a      	add	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <TaskB>:

int TaskB(int a, int b , int c ,int d)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	603b      	str	r3, [r7, #0]

	return a+b+c+d;
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	441a      	add	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	441a      	add	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	4413      	add	r3, r2
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <MainOs>:

void MainOs()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	//Main Stack
	_E_MSP =_S_MSP -512 ;
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <MainOs+0xf8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000ad8:	4a3b      	ldr	r2, [pc, #236]	; (8000bc8 <MainOs+0xfc>)
 8000ada:	6013      	str	r3, [r2, #0]

	//Task A
	_S_PSP_TA = (_E_MSP - 8);
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <MainOs+0xfc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <MainOs+0x100>)
 8000ae4:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = (_S_PSP_TA -TaskA_Stack_Size);
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <MainOs+0x100>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3b64      	subs	r3, #100	; 0x64
 8000aec:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <MainOs+0x104>)
 8000aee:	6013      	str	r3, [r2, #0]

	//Task B
	_S_PSP_TB =(_E_PSP_TA - 8 );
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <MainOs+0x104>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3b08      	subs	r3, #8
 8000af6:	4a37      	ldr	r2, [pc, #220]	; (8000bd4 <MainOs+0x108>)
 8000af8:	6013      	str	r3, [r2, #0]
	_E_PSP_TB =(_S_PSP_TB - TaskB_Stack_Size);
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MainOs+0x108>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3b64      	subs	r3, #100	; 0x64
 8000b00:	4a35      	ldr	r2, [pc, #212]	; (8000bd8 <MainOs+0x10c>)
 8000b02:	6013      	str	r3, [r2, #0]

	while (1)
	{
		__asm("NOP");
 8000b04:	bf00      	nop
		if(TASKA_flag)
 8000b06:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <MainOs+0x110>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d02b      	beq.n	8000b66 <MainOs+0x9a>
		{
			//Set PSP Register = _S_PSP_TA
			OS_SET_PSP(_S_PSP_TA);
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <MainOs+0x100>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f380 8809 	msr	PSP, r0
			//SP->PSP
			OS_SWITCH_SP_to_PSP;
 8000b18:	f3ef 8014 	mrs	r0, CONTROL
 8000b1c:	f04f 0102 	mov.w	r1, #2
 8000b20:	ea41 0000 	orr.w	r0, r1, r0
 8000b24:	f380 8814 	msr	CONTROL, r0
			//Switch from privileged --> unprivileged
			SWITCH_CPU_AccessLevelUnprivileged;
 8000b28:	f3ef 8314 	mrs	r3, CONTROL
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	f383 8814 	msr	CONTROL, r3
			TASKA_flag = 0 ;
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MainOs+0x110>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
			TASKA_flag = TaskA(1,2,3);
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff ffa0 	bl	8000a84 <TaskA>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MainOs+0x110>)
 8000b4a:	701a      	strb	r2, [r3, #0]

			//Switch from unprivileged --> privileged
			OS_Generate_Exception;
 8000b4c:	df03      	svc	3
			//SP->MSP
			OS_SWITCH_SP_to_MSP;
 8000b4e:	f3ef 8014 	mrs	r0, CONTROL
 8000b52:	f04f 0105 	mov.w	r1, #5
 8000b56:	ea00 0001 	and.w	r0, r0, r1
 8000b5a:	f380 8814 	msr	CONTROL, r0

			TASKA_flag = 0 ;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MainOs+0x110>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e7ce      	b.n	8000b04 <MainOs+0x38>

		}else if(TASKB_flag)
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MainOs+0x114>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0ca      	beq.n	8000b04 <MainOs+0x38>
		{
			//Set PSP Register = _S_PSP_TB
			OS_SET_PSP(_S_PSP_TB);
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MainOs+0x108>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f380 8809 	msr	PSP, r0
			//SP->PSP
			OS_SWITCH_SP_to_PSP;
 8000b78:	f3ef 8014 	mrs	r0, CONTROL
 8000b7c:	f04f 0102 	mov.w	r1, #2
 8000b80:	ea41 0000 	orr.w	r0, r1, r0
 8000b84:	f380 8814 	msr	CONTROL, r0
			//Switch from privileged --> unprivileged
			SWITCH_CPU_AccessLevelUnprivileged;
 8000b88:	f3ef 8314 	mrs	r3, CONTROL
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	f383 8814 	msr	CONTROL, r3

			TASKB_flag = TaskB(1,2,3,4);
 8000b94:	2304      	movs	r3, #4
 8000b96:	2203      	movs	r2, #3
 8000b98:	2102      	movs	r1, #2
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff ff82 	bl	8000aa4 <TaskB>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MainOs+0x114>)
 8000ba6:	701a      	strb	r2, [r3, #0]

			//Switch from unprivileged --> privileged
			OS_Generate_Exception;
 8000ba8:	df03      	svc	3
			//SP->MSP
			OS_SWITCH_SP_to_MSP;
 8000baa:	f3ef 8014 	mrs	r0, CONTROL
 8000bae:	f04f 0105 	mov.w	r1, #5
 8000bb2:	ea00 0001 	and.w	r0, r0, r1
 8000bb6:	f380 8814 	msr	CONTROL, r0

			TASKB_flag = 0 ;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MainOs+0x114>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8000bc0:	e7a0      	b.n	8000b04 <MainOs+0x38>
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000070 	.word	0x20000070
 8000bcc:	20000078 	.word	0x20000078
 8000bd0:	20000088 	.word	0x20000088
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	20000080 	.word	0x20000080
 8000bdc:	20000074 	.word	0x20000074
 8000be0:	20000084 	.word	0x20000084

08000be4 <main>:
		}
	}
}

int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0

	//Enable GPIOA and GPIOB and AFIO
	RCC_GPIOB_CLK_EN();
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <main+0x68>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <main+0x68>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <main+0x68>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <main+0x68>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]



	//Set EXTI Configuration
	EXTI_PinConfig_t EXTIConfig ;
	EXTIConfig.EXTI_PIN=EXTI9PB9;
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <main+0x6c>)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTIConfig.Trigger_Case=EXTI_Trigger_RISING;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	743b      	strb	r3, [r7, #16]
	EXTIConfig.P_IRQ_CallBack=EXTI9_CALLBACK;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <main+0x70>)
 8000c12:	617b      	str	r3, [r7, #20]
	EXTIConfig.IRQ_EN=EXTI_IRQ_Enable;
 8000c14:	2301      	movs	r3, #1
 8000c16:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTIConfig);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fc54 	bl	80004c8 <MCAL_EXTI_GPIO_Init>

	//Enable NVIC
	NVIC_IRQ23_EXTI5_9_Enable;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <main+0x74>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <main+0x74>)
 8000c26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c2a:	6013      	str	r3, [r2, #0]

	MainOs();
 8000c2c:	f7ff ff4e 	bl	8000acc <MainOs>
	SWITCH_CPU_AccessLevel(unprivileged);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff fec1 	bl	80009b8 <SWITCH_CPU_AccessLevel>





	IRQ_Flag=1;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <main+0x78>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		if(IRQ_Flag)
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <main+0x78>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0fb      	beq.n	8000c3c <main+0x58>
		{
			IRQ_Flag=0;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <main+0x78>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000c4a:	e7f7      	b.n	8000c3c <main+0x58>
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	08000d14 	.word	0x08000d14
 8000c54:	08000a25 	.word	0x08000a25
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	20000075 	.word	0x20000075

08000c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8e:	f000 f811 	bl	8000cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c92:	f7ff ffa7 	bl	8000be4 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   r0, =_estack
 8000c98:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ca4:	08000d28 	.word	0x08000d28
  ldr r2, =_sbss
 8000ca8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000cac:	2000008c 	.word	0x2000008c

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <__libc_init_array>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	4e0c      	ldr	r6, [pc, #48]	; (8000cec <__libc_init_array+0x38>)
 8000cba:	4c0d      	ldr	r4, [pc, #52]	; (8000cf0 <__libc_init_array+0x3c>)
 8000cbc:	1ba4      	subs	r4, r4, r6
 8000cbe:	10a4      	asrs	r4, r4, #2
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	d109      	bne.n	8000cd8 <__libc_init_array+0x24>
 8000cc4:	f000 f81a 	bl	8000cfc <_init>
 8000cc8:	2500      	movs	r5, #0
 8000cca:	4e0a      	ldr	r6, [pc, #40]	; (8000cf4 <__libc_init_array+0x40>)
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <__libc_init_array+0x44>)
 8000cce:	1ba4      	subs	r4, r4, r6
 8000cd0:	10a4      	asrs	r4, r4, #2
 8000cd2:	42a5      	cmp	r5, r4
 8000cd4:	d105      	bne.n	8000ce2 <__libc_init_array+0x2e>
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cdc:	4798      	blx	r3
 8000cde:	3501      	adds	r5, #1
 8000ce0:	e7ee      	b.n	8000cc0 <__libc_init_array+0xc>
 8000ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ce6:	4798      	blx	r3
 8000ce8:	3501      	adds	r5, #1
 8000cea:	e7f2      	b.n	8000cd2 <__libc_init_array+0x1e>
 8000cec:	08000d20 	.word	0x08000d20
 8000cf0:	08000d20 	.word	0x08000d20
 8000cf4:	08000d20 	.word	0x08000d20
 8000cf8:	08000d24 	.word	0x08000d24

08000cfc <_init>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	bf00      	nop
 8000d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d02:	bc08      	pop	{r3}
 8000d04:	469e      	mov	lr, r3
 8000d06:	4770      	bx	lr

08000d08 <_fini>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr
