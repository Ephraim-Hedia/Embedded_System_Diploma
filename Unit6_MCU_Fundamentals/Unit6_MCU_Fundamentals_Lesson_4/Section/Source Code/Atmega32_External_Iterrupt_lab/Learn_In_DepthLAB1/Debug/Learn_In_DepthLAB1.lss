
Learn_In_DepthLAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e7  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  00000f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000016ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_1>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_2>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 65 00 	call	0xca	; 0xca <main>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
void INT_VECT(void)

void DIO_init(void)
{
	//Set pin 2 in PORTB as INPUT to config INT2
	DDRB &=~(1<<2);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	87 bb       	out	0x17, r24	; 23
	//Set pin 2 in PORTD as INPUT to config INT0
	DDRD &=~(1<<2);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8b 7f       	andi	r24, 0xFB	; 251
  76:	81 bb       	out	0x11, r24	; 17
	//Set pin 3 in PORTD as INPUT to config INT1
	DDRD &=~(1<<3);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	87 7f       	andi	r24, 0xF7	; 247
  7c:	81 bb       	out	0x11, r24	; 17
	
	//Configuration for LEDS
	DDRD |=(1<<5);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 62       	ori	r24, 0x20	; 32
  82:	81 bb       	out	0x11, r24	; 17
	DDRD |=(1<<6);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 64       	ori	r24, 0x40	; 64
  88:	81 bb       	out	0x11, r24	; 17
	DDRD |=(1<<7);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	81 bb       	out	0x11, r24	; 17
  90:	08 95       	ret

00000092 <EXTI_init>:
{
	//For Interrupt 0
//	Table 35. Interrupt 0 Sense Control
//	0 1 Any logical change on INT0 generates an interrupt request.

	MCUCR |=(1<<0);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	81 60       	ori	r24, 0x01	; 1
  96:	85 bf       	out	0x35, r24	; 53
	MCUCR &=~ (1<<1);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	85 bf       	out	0x35, r24	; 53
	
	

//	Table 34. Interrupt 1 Sense Control
//  1 1 The rising edge of INT0 generates an interrupt request.
	MCUCR |=(1<<2);
  9e:	85 b7       	in	r24, 0x35	; 53
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	85 bf       	out	0x35, r24	; 53
	MCUCR |=(1<<3);
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	85 bf       	out	0x35, r24	; 53
	
//• Bit 6 – ISC2: Interrupt Sense Control 2
//If ISC2 is written to zero, a falling edge on INT2 activates the interrupt. If ISC2 is written to one, a rising edge on
//INT2 activates the interrupt.
	MCUCSR &=~(1<<6);
  aa:	84 b7       	in	r24, 0x34	; 52
  ac:	8f 7b       	andi	r24, 0xBF	; 191
  ae:	84 bf       	out	0x34, r24	; 52
	
	
	//Enable External Interrupt (INT0,INT1,INT2)
	GICR|=(1<<5);
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	8b bf       	out	0x3b, r24	; 59
	GICR|=(1<<6);
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8b bf       	out	0x3b, r24	; 59
	GICR|=(1<<7);
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8b bf       	out	0x3b, r24	; 59
	
	//Enable Global Interrupt
	SREG |=(1<<7);
  c2:	8f b7       	in	r24, 0x3f	; 63
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	8f bf       	out	0x3f, r24	; 63
  c8:	08 95       	ret

000000ca <main>:
}
int main(void)
{
    DIO_init();
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
	EXTI_init();
  ce:	0e 94 49 00 	call	0x92	; 0x92 <EXTI_init>
	
    while (1) 
    {
		PORTD &=~(1<<5);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 bb       	out	0x12, r24	; 18
		PORTD &=~(1<<6);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7b       	andi	r24, 0xBF	; 191
  dc:	82 bb       	out	0x12, r24	; 18
		PORTD &=~(1<<7);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	f6 cf       	rjmp	.-20     	; 0xd2 <main+0x8>

000000e6 <__vector_1>:
    }
}

ISR(ISR_EXT_INT0)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	PORTD |=(1<<5);
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <__vector_1+0x1c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__vector_1+0x26>
 10c:	00 00       	nop
	_delay_ms(1000);
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_2>:


ISR(ISR_EXT_INT1)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
	PORTD |=(1<<6);
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	80 64       	ori	r24, 0x40	; 64
 132:	82 bb       	out	0x12, r24	; 18
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	98 e1       	ldi	r25, 0x18	; 24
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <__vector_2+0x1c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_2+0x26>
 144:	00 00       	nop
	_delay_ms(1000);
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_3>:


ISR(ISR_EXT_INT2)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	PORTD |=(1<<7);
 166:	82 b3       	in	r24, 0x12	; 18
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	89 e6       	ldi	r24, 0x69	; 105
 170:	98 e1       	ldi	r25, 0x18	; 24
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <__vector_3+0x1c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <__vector_3+0x26>
 17c:	00 00       	nop
	_delay_ms(1000);
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
